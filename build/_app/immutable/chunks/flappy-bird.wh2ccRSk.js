import{s as np,e,a as o,H as r,b as p,g as c,d as l,l as u,m as k,k as s,f as i,o as Se,i as t,n as Ka}from"./scheduler.DYp-TRml.js";import{S as sp,i as ap}from"./index.BHCOM26g.js";function tp(Re){let d,Xa='<a href="#contents"><span class="icon icon-link"></span></a>Contents',Jn,T,nt='<li><a href="#introduction">Introduction</a></li> <li><a href="#modifying-the-birds">Modifying the birds</a></li> <li><a href="#generating-the-population">Generating the population</a></li> <li><a href="#testing-the-population">Testing the population</a></li> <li><a href="#gathering-the-results">Gathering the results</a></li> <li><a href="#the-genetic-algorithm">The Genetic Algorithm</a> <ol><li><a href="#selection">Selection</a></li> <li><a href="#crossover">Crossover</a></li> <li><a href="#mutation">Mutation</a></li></ol></li> <li><a href="#the-end-result">The End Result</a></li>',Kn,h,st='<a href="#introduction"><span class="icon icon-link"></span></a>Introduction',Xn,H,at=`I became interested in the concepts of AI when
<a href="https://www.youtube.com/watch?v=UuEqUN98uZo" rel="nofollow">a series of lectures from Stanford’s CS 221 programme</a>
popped up in my Youtube recommendations. It covers a lot of concepts
in artificial intelligence and provides many examples and live or semi-live coding
in their lectures. Their <a href="https://www.youtube.com/watch?v=UuEqUN98uZo" rel="nofollow">Github website</a>
has many theory and coding exercises in Python, which is very useful to
understand the material further.`,ns,M,tt=`After watching several videos and being inspired by <a href="https://www.youtube.com/@CodeBullet" rel="nofollow">CodeBullet</a>,
I became interested in making a flappy bird clone that plays itself.`,ss,L,et=`I made the whole project in <a href="https://www.youtube.com/watch?v=UuEqUN98uZo" rel="nofollow">Godot</a>, a free, opensouce, and
extremely lightweight game engine. Python would perhaps be a better alternative
as the language is often used for AI projects, thanks to the many libraries it
has, including: numpy, pandas, and PyTorch. I chose Godot just for the sake of
learning Godot.`,as,E,pt=`I will model the decision making of the birds with a linear classifier
and use a <a href="https://www.youtube.com/watch?v=UuEqUN98uZo" rel="nofollow">genetic algorithm</a>
to train the model, with the amount of pipes
each bird survives as the fitness score.`,ts,I,ot=`Just to quickly summarize how the genetic algorithm works,
we first randomly initialize the first generation. Then we
will test each of the individuals to get a score/fitness value.
We will then randomly select individuals to breed and generate the
individuals for the next generation. We can then add some mutations
to further add variation. This process roughly simulates biological
evolution and natural selection.`,es,A,lt="First of all, for the game, you could find godot tutorials on the web. Many of them will teach how to code flappy bird since it is a simple yet popular game. This is what my game looks like.",ps,m,ct='<a href="#modifying-the-birds"><span class="icon icon-link"></span></a>Modifying the birds',os,j,it=`Instead of having the player control the bird when to jump, it will
calculate when to jump based on some weights, which will be a list of floats.`,ls,z,cs,qe=`<code class="language-gdscript"><span class="token comment"># bird.gd</span>
<span class="token keyword">func</span> <span class="token function">_physics_process</span><span class="token punctuation">(</span>_delta<span class="token punctuation">:</span> <span class="token class-name">float</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">is_action_just_pressed</span><span class="token punctuation">(</span><span class="token string">"jump"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        linear_velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> jumpPower</code>`,is,S,us,Ne=`<code class="language-gdscript"><span class="token comment"># bird.gd</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">var</span> weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token function">should_jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">var</span> value <span class="token operator">:=</span> <span class="token function">signf</span><span class="token punctuation">(</span>
        weights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Data<span class="token punctuation">.</span>nextPipePosition<span class="token punctuation">.</span>x <span class="token operator">-</span> global_position<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span>
        weights<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Data<span class="token punctuation">.</span>nextPipePosition<span class="token punctuation">.</span>y <span class="token operator">-</span> global_position<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">_physics_process</span><span class="token punctuation">(</span>_delta<span class="token punctuation">:</span> <span class="token class-name">float</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">should_jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        linear_velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> jumpPower</code>`,rs,R,ut="bird.gd before and after",ks,q,rt=`In the <code>should_jump</code> function, I used a simple linear classifier for the decision making.
However, the bird needs information about its environment before it can make decisions.
In the code example, I provide it through a <a href="https://www.youtube.com/watch?v=UuEqUN98uZo" rel="nofollow">Singleton</a>
in <em>data.gd</em>.`,ds,N,hs,Be=`<code class="language-gdscript"><span class="token comment"># data.gd</span>
<span class="token keyword">extends</span> <span class="token class-name">Node2D</span>

<span class="token keyword">var</span> pipeQueue <span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>Pipe<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">var</span> nextPipePosition <span class="token operator">:=</span> <span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">_physics_process</span><span class="token punctuation">(</span>delta<span class="token punctuation">:</span> <span class="token class-name">float</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># I assumes bird is at x = 100</span>
    <span class="token comment"># Ignore the pipe when it passes the birds </span>
    <span class="token comment"># as it is no longer relevant</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeQueue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>global_position<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      pipeQueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      nextPipePosition <span class="token operator">=</span> pipeQueue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>global_position

<span class="token keyword">func</span> <span class="token function">queuePipe</span><span class="token punctuation">(</span>pipe<span class="token punctuation">:</span> <span class="token class-name">Pipe</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  pipeQueue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span></code>`,ms,B,kt="data.gd",fs,G,ws,Ge=`<code class="language-gdscript"><span class="token comment"># pipeSpawner.gd</span>
<span class="token keyword">func</span> <span class="token function">spawn_pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  <span class="token keyword">var</span> pipe <span class="token operator">=</span> Pipe<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">add_child</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span>

  <span class="token comment"># Queue the pipes into Data</span>
  Data<span class="token punctuation">.</span><span class="token function">queuePipe</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span>    

  <span class="token comment"># Setup the pipes</span>
  pipe<span class="token punctuation">.</span>speed <span class="token operator">=</span> pipeSpeed
  pipe<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token function">randf_range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></code>`,gs,D,dt="pipeSpawner.gd",vs,U,ht=`Personally, I feel this is not as authentic as each bird having a raycast
so they can individually perceive the environment. However, since
each bird is facing the same pipes and they are located in the same x-axis,
it feels rather unnecessary wasting resources doing so
compared to using a singleton.`,_s,f,mt='<a href="#generating-the-population"><span class="icon icon-link"></span></a>Generating the population',ys,O,ft=`Now I start working on the Trainer class, which runs the genetic algorithm.
The class will do the following things:`,bs,F,wt="<li>Initialize the birds</li> <li>Test the birds in the game</li> <li>Select the ones with the best result</li> <li><em>Breed</em> them to create the next generation</li> <li>Introduce random mutations</li>",xs,W,gt="I begin by initializing the birds.",Cs,Q,Ps,De=`<code class="language-gdscript"><span class="token keyword">class_name</span> <span class="token class-name">Trainer</span>
<span class="token keyword">extends</span> <span class="token class-name">Node2D</span>

<span class="token comment"># Emit when all birds have died</span>
<span class="token keyword">signal</span> generation_ended

<span class="token comment"># Emit when the next generation has been created</span>
<span class="token keyword">signal</span> next_generation_ready

@<span class="token keyword">onready</span> <span class="token keyword">var</span> bird <span class="token operator">:=</span> <span class="token keyword">preload</span><span class="token punctuation">(</span><span class="token string">"res://Player/Bird.tscn"</span><span class="token punctuation">)</span>

<span class="token comment"># Length of the each weight in the weights array</span>
<span class="token keyword">var</span> length <span class="token operator">:=</span> <span class="token number">2</span>

<span class="token comment"># Amount of birds to spawn</span>
<span class="token keyword">var</span> generation_size <span class="token operator">:=</span> <span class="token number">500</span>

<span class="token comment"># Array containing the weights of each bird</span>
<span class="token keyword">var</span> weights_arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>


<span class="token comment"># Stores a weight and its score</span>
<span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token punctuation">:</span>
  <span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token class-name">int</span>
  <span class="token keyword">var</span> weights<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span>

  <span class="token keyword">func</span> <span class="token function">_init</span><span class="token punctuation">(</span>_score<span class="token punctuation">:</span> <span class="token class-name">int</span><span class="token punctuation">,</span> _weights<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    score <span class="token operator">=</span> _score
    weights <span class="token operator">=</span> _weights

<span class="token comment"># Results from each bird</span>
<span class="token keyword">var</span> results <span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>Result<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code>`,Ts,Z,vt="trainer.gd",Hs,V,_t=`The trainer will act as the parent of the birds. It will spawn every bird
and give it weights from the weights_arr.`,Ms,Y,Ls,Ue=`<code class="language-gdscript"><span class="token comment"># trainer.gd</span>
<span class="token keyword">func</span> <span class="token function">initialize_weights</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  <span class="token comment"># For each bird, initialize the weights</span>
  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>generation_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Initialize weights between -10 and 10</span>
    <span class="token keyword">var</span> weights <span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
      weights<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">rand_range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  weights_arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span>


<span class="token comment"># Instantiate all the birds</span>
<span class="token keyword">func</span> <span class="token function">prepare_next_generation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  <span class="token comment"># Prepare the weights</span>
  <span class="token keyword">if</span> weights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token function">initialize_weights</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># We will define this method later</span>
    <span class="token function">calculate_next_generation_weights</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment"># Reset the results</span>
  results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment"># Spawn each bird and assign them the weights</span>
  <span class="token keyword">for</span> weights <span class="token keyword">in</span> weights_arr<span class="token punctuation">:</span> 
    <span class="token keyword">var</span> child <span class="token punctuation">:</span> <span class="token class-name">Bird</span> <span class="token operator">=</span> bird<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    child<span class="token punctuation">.</span>weights <span class="token operator">=</span> weights
    add_child<span class="token punctuation">.</span><span class="token function">call_deferred</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>

  next_generation_ready<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Es,$,yt="trainer.gd",Is,J,bt=`Here, i used <code>call_deferred</code> to defer the execution of <code>add_child</code>. I
encountered some errors when directly calling <code>add_child</code>, possibly because
too much children are added at once. So this should help alleviate the problem.`,As,K,xt=`Also, here I didn’t change anything about the position of the bird in the script
when instantiated, relying instead on the default positions of the Trainer and Bird
scene. You may want to change it according to your needs.`,js,X,Ct=`One possible optimization here is to do <a href="https://www.youtube.com/watch?v=UuEqUN98uZo" rel="nofollow">object pooling</a> where
instead of instantiating new birds every generation, we could store all birds
in one array and just reset its state every generation, thereby removing the
cost of repeatedly instantiating and removing the bird.`,zs,w,Pt='<a href="#testing-the-population"><span class="icon icon-link"></span></a>Testing the population',Ss,nn,Tt=`The <code>prepare_next_generation</code> function in trainer.gd will be called by
<code>main.gd</code>, which will control the whole game.`,Rs,sn,qs,Oe=`<code class="language-gdscript"><span class="token comment"># main.gd</span>
@<span class="token keyword">onready</span> <span class="token keyword">var</span> trainer <span class="token operator">:=</span> <span class="token variable">$Trainer</span>
@<span class="token keyword">onready</span> <span class="token keyword">var</span> pipeSpawner <span class="token operator">:=</span> <span class="token variable">$PipeSpawner</span>


<span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  <span class="token comment"># Start the trainer directly</span>
  <span class="token comment"># Alternatively, we may also trigger this on a button click</span>
  trainer<span class="token punctuation">.</span><span class="token function">prepare_next_generation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment"># Connect the signals</span>
  trainer<span class="token punctuation">.</span>next_generation_ready<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>start_training<span class="token punctuation">)</span>
  trainer<span class="token punctuation">.</span>generation_ended<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>generation_ended<span class="token punctuation">)</span>


<span class="token keyword">func</span> <span class="token function">start_training</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  Events<span class="token punctuation">.</span>start_generation<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  UiEvents<span class="token punctuation">.</span>next_generation<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  pipeSpawner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">func</span> <span class="token function">generation_ended</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span> 
  Events<span class="token punctuation">.</span>end_generation<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  pipeSpawner<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment"># Directly continue to the next generation</span>
  <span class="token comment"># Alternatively, we may also wait until further user input before continuing</span>
  trainer<span class="token punctuation">.</span><span class="token function">prepare_next_generation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Ns,an,Ht="main.gd",Bs,tn,Mt=`We connect the signals in <code>trainer</code> to functions that trigger the
environment, like starting or stopping the <code>pipeSpawner</code>.
Here, <code>Events</code> and <code>UiEvents</code> are simply autoloaded
scripts / singleton classes that act as signal hubs, allowing
every node to listen to it.`,Gs,en,Lt=`Below, I make the bird listen to the <code>Events.start_generation</code>
signal to start moving to ensure every bird starts at the same moment.
I also made the pipes remove itself when <code>Events.start_generation</code>
is emitted.`,Ds,pn,Us,Fe=`<code class="language-gdscript"><span class="token comment"># bird.gd</span>
<span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  <span class="token function">set_deferred</span><span class="token punctuation">(</span><span class="token string">"freeze"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>

  <span class="token comment"># Add CONNECT_ONE_SHOT flag to automatically disconnect signal</span>
  Events<span class="token punctuation">.</span>start_generation<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>
    <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token function">set_deferred</span><span class="token punctuation">(</span><span class="token string">"freeze"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token constant">CONNECT_ONE_SHOT</span>
  <span class="token punctuation">)</span></code>`,Os,on,Et="bird.gd",Fs,g,It='<a href="#gathering-the-results"><span class="icon icon-link"></span></a>Gathering the results',Ws,ln,At=`The birds will attempt to survive with the weights (genetic code)
given to them by the <code>trainer</code>, passing through pipes and earning
their scores/fitness value along the way.`,Qs,cn,jt=`When the birds die, it needs to pass the data back into the
<code>trainer</code> so that it may generate the next generation.
I achieve this by following a common rule of thumb,
<a href="https://kidscancode.org/godot_recipes/4.x/basics/node_communication/index.html" rel="nofollow">Call down, signal up</a>.`,Zs,un,Vs,We=`<code class="language-gdscript"><span class="token comment"># bird.gd</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">signal</span> <span class="token function">died</span><span class="token punctuation">(</span>score<span class="token punctuation">:</span> <span class="token class-name">int</span><span class="token punctuation">,</span> weights<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">func</span> <span class="token function">_on_body_entered</span><span class="token punctuation">(</span>body<span class="token punctuation">:</span> <span class="token class-name">Node</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> body <span class="token keyword">is</span> Pipe<span class="token punctuation">:</span>
    <span class="token comment"># Emit the score and weights</span>
    <span class="token comment"># Your Flappy Bird game should have its mechanism of</span>
    <span class="token comment"># earning points when passing through pipes.</span>
    died<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> weights<span class="token punctuation">)</span>
    <span class="token function">queue_free</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Ys,rn,zt="bird.gd",$s,kn,Js,Qe=`<code class="language-gdscript"><span class="token comment"># trainer.gd</span>
<span class="token keyword">func</span> <span class="token function">prepare_next_generation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  <span class="token comment"># Reset the results</span>
  results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment"># Spawn the generation</span>
  <span class="token keyword">for</span> weight <span class="token keyword">in</span> weights<span class="token punctuation">:</span>
    <span class="token keyword">var</span> child <span class="token punctuation">:</span> <span class="token class-name">Bird</span> <span class="token operator">=</span> bird<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    child<span class="token punctuation">.</span>weights <span class="token operator">=</span> weight

    <span class="token comment"># New line</span>
    <span class="token comment"># Listen when the bird dies</span>
    child<span class="token punctuation">.</span>died<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>record_bird<span class="token punctuation">,</span> <span class="token constant">CONNECT_ONE_SHOT</span><span class="token punctuation">)</span> 

    add_child<span class="token punctuation">.</span><span class="token function">call_deferred</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>

  next_generation_ready<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Ks,dn,Xs,Ze=`<code class="language-gdscript"><span class="token comment"># trainer.gd</span>
<span class="token comment"># Save results from the birds</span>
<span class="token keyword">func</span> <span class="token function">record_bird</span><span class="token punctuation">(</span>score<span class="token punctuation">:</span> <span class="token class-name">int</span><span class="token punctuation">,</span> weights<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">var</span> result <span class="token operator">:=</span> Result<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> weights<span class="token punctuation">)</span>
  results<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

  <span class="token keyword">if</span> results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> generation_size<span class="token punctuation">:</span>
    generation_ended<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,na,hn,St="trainer.gd",sa,mn,Rt=`The bird emits a <code>died</code> signal while passing the score and
its weights, which its parent, the <code>trainer</code> listens to. When
all birds are dead, the <code>trainer</code> will emit <code>generation_ended</code>.`,aa,fn,qt=`An unintended but nice consequence of this approach is that
the results array will be sorted by their time alive, which corresponds
to their score.`,ta,v,Nt='<a href="#the-genetic-algorithm"><span class="icon icon-link"></span></a>The Genetic Algorithm',ea,wn,Bt=`Now we use the genetic algorithm to create the next generation, learning from
the results of the previous generation. The general code will be placed in the
<code>calculate_next_generation_weights</code> function.`,pa,gn,oa,Ve=`<code class="language-gdscript"><span class="token comment"># trainer.gd</span>
<span class="token keyword">func</span> <span class="token function">calculate_next_generation_weights</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
  weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment"># Elitism. Keeps the top 5% best achiever, at least keeps 1 of the best.</span>
  <span class="token comment"># Prevents good genes from dissapearing due to bad luck.</span>
  <span class="token comment"># Improves exploitation in exchange to exploration.</span>
  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> generation_size <span class="token operator">*</span> <span class="token number">5</span><span class="token operator">/</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Results are already sorted by their score</span>
    weights<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weights<span class="token punctuation">)</span>

  <span class="token comment"># Regenerate the rest of the population</span>
  <span class="token keyword">while</span> weights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> generation_size<span class="token punctuation">:</span>
    <span class="token comment"># The bulk of the genetic algorithm pretty much runs in this one line</span>
    <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">mutate</span><span class="token punctuation">(</span><span class="token function">breed</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    weights<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span></code>`,la,vn,Gt="trainer.gd",ca,_n,Dt=`First, I introduce <em>elitism</em>, which in genetic algorithm refers to the
practice of keeping some of the best performing individuals to prevent
good genes from dissapearing due to bad luck. After that, the rest of the
population will be generated with genetic algorithm, which consists of
selection, breeding, and mutation.`,ia,_,Ut='<a href="#selection"><span class="icon icon-link"></span></a>Selection',ua,yn,ra,Ye=`<code class="language-gdscript"><span class="token comment"># trainer.gd</span>
<span class="token comment"># Tournament selection</span>
<span class="token keyword">func</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>
  <span class="token keyword">var</span> tournament_size <span class="token punctuation">:</span> <span class="token class-name">int</span> <span class="token operator">=</span> generation_size <span class="token operator">*</span> <span class="token number">0.05</span>
  <span class="token keyword">const</span> selection_p <span class="token operator">=</span> <span class="token number">.8</span>
  <span class="token keyword">var</span> parent <span class="token punctuation">:</span> <span class="token class-name">Result</span>

  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>tournament_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">var</span> potential_parent <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token function">randi_range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> parent <span class="token keyword">or</span> <span class="token punctuation">(</span>potential_parent<span class="token punctuation">.</span>score <span class="token operator">></span> parent<span class="token punctuation">.</span>score <span class="token keyword">and</span> <span class="token function">randf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> selection_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      parent <span class="token operator">=</span> potential_parent

    <span class="token keyword">return</span> parent<span class="token punctuation">.</span>weights</code>`,ka,bn,Ot="trainer.gd - Select suitable parents for the next generation",da,xn,Ft=`There are various methods to select a suitable parent. The one I chose is tournament
selection. It works by randomly choosing <code>tournament_size</code> amount of individuals,
then choosing the fittest among them all. To add more exploration into the algorithm,
we add a <code>selection_p</code> probability that the individual with the higher score will be chosen.
Hence, the lesser fit ones still has a chance to pass on their <em>genes</em>.`,ha,Cn,Wt=`<code>tournament_size</code> and <code>selection_p</code> are parameters that can and should be
adapted based on individual cases. Most of these parameters are adjusted to
balance between exploration and exploitation, to maintain a diverse population
while also keeping the best individuals.`,ma,y,Qt='<a href="#crossover"><span class="icon icon-link"></span></a>Crossover',fa,Pn,wa,$e=`<code class="language-gdscript"><span class="token comment"># trainer.gd</span>
<span class="token keyword">func</span> <span class="token function">breed</span><span class="token punctuation">(</span>parentA<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">,</span> parentB<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">:</span>
	<span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>parentA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parentB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> child <span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>parentA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">var</span> scaling_factor <span class="token operator">=</span> <span class="token function">randf_range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> new_gene <span class="token operator">=</span> parentA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>scaling_factor <span class="token operator">+</span> parentB<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>scaling_factor<span class="token punctuation">)</span>
		child<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>new_gene<span class="token punctuation">)</span>

	<span class="token keyword">return</span> child</code>`,ga,Tn,Zt="trainer.gd - Intermediate recombination",va,Hn,Vt=`In this step, we mix the <em>genes</em> (weights) from the 2 parents. Since our
gene representation is real and continuous variables, I used <a href="http://www.geatbx.com/docu/algindex-03.html#P568_30685" rel="nofollow">intermediate recombination</a>
for the crossover method which generates the child’s values by doing a linear
interpolation between the values from both parents.`,_a,b,Yt='<a href="#mutation"><span class="icon icon-link"></span></a>Mutation',ya,Mn,$t=`Lastly, we add mutation to introduce more randomness into our program.
For now, I will just implement a simple uniform mutation.`,ba,Ln,xa,Je=`<code class="language-gdscript"><span class="token comment"># trainer.gd</span>
<span class="token comment"># Mutation algorithm, modifies the weights in place</span>
<span class="token keyword">func</span> <span class="token function">mutate</span><span class="token punctuation">(</span>weights<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Array</span><span class="token punctuation">:</span>
    <span class="token comment"># Chance of mutation occuring</span>
    <span class="token keyword">var</span> mutation_chance <span class="token operator">:=</span> <span class="token number">1</span><span class="token operator">/</span>length
    <span class="token comment"># How much change the mutation will bring</span>
    <span class="token keyword">const</span> mutation_limit <span class="token operator">:=</span> <span class="token number">0.1</span>

    <span class="token keyword">var</span> new_weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token function">randf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> mutation_chance<span class="token punctuation">:</span>
            new_weights<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>
              weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">randf_range</span><span class="token punctuation">(</span><span class="token operator">-</span>mutation_limit<span class="token punctuation">,</span> mutation_limit<span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
    <span class="token keyword">return</span> new_weights</code>`,Ca,En,Jt="trainer.gd - mutation",Pa,In,Kt=`It would be better if the mutation can be more flexible, perhaps
changing the mutation chance or amount as time goes on, or maybe mutate it relative
to the value of the weight, but this will suffice for now.`,Ta,x,Xt='<a href="#the-end-result"><span class="icon icon-link"></span></a>The End Result',Ha,C,ne,Ma,An,se="Flappy Birds with Machine Learning",La,jn,ae="Great! It seems to work, maybe.. 👍",Ea,zn,te=`Although, after looking at it and running it multiple times,
I find the bird’s behaviour to be weird. It always jumps before
encountering the pipe hole, which makes sense, but when it is between the pipes,
it almost always seems to jump again, nearly hitting the top pipe.
Why does it behave like so?`,Ia,Sn,ee="It turns out to be the bird’s decision making.",Aa,Rn,ja,Ke=`<code class="language-gdscript"><span class="token comment"># bird.gd</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">var</span> weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token function">should_jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">var</span> value <span class="token operator">:=</span> <span class="token function">signf</span><span class="token punctuation">(</span>
        weights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Data<span class="token punctuation">.</span>nextPipePosition<span class="token punctuation">.</span>x <span class="token operator">-</span> global_position<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span>
        weights<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Data<span class="token punctuation">.</span>nextPipePosition<span class="token punctuation">.</span>y <span class="token operator">-</span> global_position<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></code>`,za,qn,pe="Bird.gd - linear classification decision making",Sa,Nn,oe=`Because the birds can only make decisions based on the x and y distance to the
next pipe, it basically only jumps based on a line with slope -weights[0]/weights[1] passing through
the center of the pipes.`,Ra,Bn,le='<img src="/blogs/flappy-birds-godot/bird-decision-making.png" alt="Decision line passing through the middle of the pipes."/>',qa,Gn,ce="Illustration of the bird’s decision making",Na,Dn,ie=`The line always has to pass through the middle of the pipes because that
is the origin (we determine x and y based on the center of the pipes).
The linear equation is missing a constant value that enables
it to not have to always pass the origin.`,Ba,Un,ue=`So all the training we have been doing is spinning the line around the origin
to determine the best slope. Also, because the line always has to pass through the
middle of the pipes, the birds in the previous video always tries to jump while being
in the middle of the pipes.`,Ga,On,re="I’ll slightly fix this part like so.",Da,Fn,Ua,Xe=`<code class="language-gdscript"><span class="token comment"># bird.gd</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">var</span> weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token function">should_jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">var</span> value <span class="token operator">:=</span> <span class="token function">signf</span><span class="token punctuation">(</span>
        weights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Data<span class="token punctuation">.</span>nextPipePosition<span class="token punctuation">.</span>x <span class="token operator">-</span> global_position<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span>
        weights<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Data<span class="token punctuation">.</span>nextPipePosition<span class="token punctuation">.</span>y <span class="token operator">-</span> global_position<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> 
        weights<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></code>`,Oa,Wn,ke="Slightly improved decision making",Fa,Qn,de="After this change, this is what the game looks like.",Wa,P,he,Qa,Za,Va,Zn,me=`Now, the bird’s movements should look better compared to the last.
However, we can still vaguely observe the decision line of the birds.
That should tell you that the machine learning algorithm here is very very very basic.
Most of the best birds are due to better decision lines and a lot of luck, since if
the bird lands on the decision line too late, they will hit the pipe regardless.
We can improve the model by increasing the amount of features,
for example the linear velocity of the bird.`,Ya,Vn,fe=`I have added more features and a basic customization screen on the game,
which you can try on itch.io.`,$a,Yn,we="Anyways, this would be the end of this post.",Ja,$n,ge="Thanks for reading till the end. 👍";return{c(){d=e("h2"),d.innerHTML=Xa,Jn=o(),T=e("ol"),T.innerHTML=nt,Kn=o(),h=e("h2"),h.innerHTML=st,Xn=o(),H=e("p"),H.innerHTML=at,ns=o(),M=e("p"),M.innerHTML=tt,ss=o(),L=e("p"),L.innerHTML=et,as=o(),E=e("p"),E.innerHTML=pt,ts=o(),I=e("p"),I.textContent=ot,es=o(),A=e("p"),A.textContent=lt,ps=o(),m=e("h2"),m.innerHTML=ct,os=o(),j=e("p"),j.textContent=it,ls=o(),z=e("pre"),cs=new r(!1),is=o(),S=e("pre"),us=new r(!1),rs=o(),R=e("p"),R.textContent=ut,ks=o(),q=e("p"),q.innerHTML=rt,ds=o(),N=e("pre"),hs=new r(!1),ms=o(),B=e("p"),B.textContent=kt,fs=o(),G=e("pre"),ws=new r(!1),gs=o(),D=e("p"),D.textContent=dt,vs=o(),U=e("p"),U.textContent=ht,_s=o(),f=e("h2"),f.innerHTML=mt,ys=o(),O=e("p"),O.textContent=ft,bs=o(),F=e("ol"),F.innerHTML=wt,xs=o(),W=e("p"),W.textContent=gt,Cs=o(),Q=e("pre"),Ps=new r(!1),Ts=o(),Z=e("p"),Z.textContent=vt,Hs=o(),V=e("p"),V.textContent=_t,Ms=o(),Y=e("pre"),Ls=new r(!1),Es=o(),$=e("p"),$.textContent=yt,Is=o(),J=e("p"),J.innerHTML=bt,As=o(),K=e("p"),K.textContent=xt,js=o(),X=e("p"),X.innerHTML=Ct,zs=o(),w=e("h2"),w.innerHTML=Pt,Ss=o(),nn=e("p"),nn.innerHTML=Tt,Rs=o(),sn=e("pre"),qs=new r(!1),Ns=o(),an=e("p"),an.textContent=Ht,Bs=o(),tn=e("p"),tn.innerHTML=Mt,Gs=o(),en=e("p"),en.innerHTML=Lt,Ds=o(),pn=e("pre"),Us=new r(!1),Os=o(),on=e("p"),on.textContent=Et,Fs=o(),g=e("h2"),g.innerHTML=It,Ws=o(),ln=e("p"),ln.innerHTML=At,Qs=o(),cn=e("p"),cn.innerHTML=jt,Zs=o(),un=e("pre"),Vs=new r(!1),Ys=o(),rn=e("p"),rn.textContent=zt,$s=o(),kn=e("pre"),Js=new r(!1),Ks=o(),dn=e("pre"),Xs=new r(!1),na=o(),hn=e("p"),hn.textContent=St,sa=o(),mn=e("p"),mn.innerHTML=Rt,aa=o(),fn=e("p"),fn.textContent=qt,ta=o(),v=e("h2"),v.innerHTML=Nt,ea=o(),wn=e("p"),wn.innerHTML=Bt,pa=o(),gn=e("pre"),oa=new r(!1),la=o(),vn=e("p"),vn.textContent=Gt,ca=o(),_n=e("p"),_n.innerHTML=Dt,ia=o(),_=e("h3"),_.innerHTML=Ut,ua=o(),yn=e("pre"),ra=new r(!1),ka=o(),bn=e("p"),bn.textContent=Ot,da=o(),xn=e("p"),xn.innerHTML=Ft,ha=o(),Cn=e("p"),Cn.innerHTML=Wt,ma=o(),y=e("h3"),y.innerHTML=Qt,fa=o(),Pn=e("pre"),wa=new r(!1),ga=o(),Tn=e("p"),Tn.textContent=Zt,va=o(),Hn=e("p"),Hn.innerHTML=Vt,_a=o(),b=e("h3"),b.innerHTML=Yt,ya=o(),Mn=e("p"),Mn.textContent=$t,ba=o(),Ln=e("pre"),xa=new r(!1),Ca=o(),En=e("p"),En.textContent=Jt,Pa=o(),In=e("p"),In.textContent=Kt,Ta=o(),x=e("h2"),x.innerHTML=Xt,Ha=o(),C=e("video"),Ma=o(),An=e("p"),An.textContent=se,La=o(),jn=e("p"),jn.textContent=ae,Ea=o(),zn=e("p"),zn.textContent=te,Ia=o(),Sn=e("p"),Sn.textContent=ee,Aa=o(),Rn=e("pre"),ja=new r(!1),za=o(),qn=e("p"),qn.textContent=pe,Sa=o(),Nn=e("p"),Nn.textContent=oe,Ra=o(),Bn=e("p"),Bn.innerHTML=le,qa=o(),Gn=e("p"),Gn.textContent=ce,Na=o(),Dn=e("p"),Dn.textContent=ie,Ba=o(),Un=e("p"),Un.textContent=ue,Ga=o(),On=e("p"),On.textContent=re,Da=o(),Fn=e("pre"),Ua=new r(!1),Oa=o(),Wn=e("p"),Wn.textContent=ke,Fa=o(),Qn=e("p"),Qn.textContent=de,Wa=o(),P=e("video"),Qa=o(),Za=e("br"),Va=o(),Zn=e("p"),Zn.textContent=me,Ya=o(),Vn=e("p"),Vn.textContent=fe,$a=o(),Yn=e("p"),Yn.textContent=we,Ja=o(),$n=e("p"),$n.textContent=ge,this.h()},l(n){d=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-1ggwcdl"&&(d.innerHTML=Xa),Jn=l(n),T=p(n,"OL",{"data-svelte-h":!0}),c(T)!=="svelte-1jlq6c9"&&(T.innerHTML=nt),Kn=l(n),h=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-1jmg1lr"&&(h.innerHTML=st),Xn=l(n),H=p(n,"P",{"data-svelte-h":!0}),c(H)!=="svelte-lrm1g6"&&(H.innerHTML=at),ns=l(n),M=p(n,"P",{"data-svelte-h":!0}),c(M)!=="svelte-136gsn9"&&(M.innerHTML=tt),ss=l(n),L=p(n,"P",{"data-svelte-h":!0}),c(L)!=="svelte-oeevmr"&&(L.innerHTML=et),as=l(n),E=p(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-xij8d3"&&(E.innerHTML=pt),ts=l(n),I=p(n,"P",{"data-svelte-h":!0}),c(I)!=="svelte-10mkrbp"&&(I.textContent=ot),es=l(n),A=p(n,"P",{"data-svelte-h":!0}),c(A)!=="svelte-jf50ol"&&(A.textContent=lt),ps=l(n),m=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-8i9jte"&&(m.innerHTML=ct),os=l(n),j=p(n,"P",{"data-svelte-h":!0}),c(j)!=="svelte-fst5g2"&&(j.textContent=it),ls=l(n),z=p(n,"PRE",{class:!0});var a=u(z);cs=k(a,!1),a.forEach(s),is=l(n),S=p(n,"PRE",{class:!0});var ve=u(S);us=k(ve,!1),ve.forEach(s),rs=l(n),R=p(n,"P",{"data-svelte-h":!0}),c(R)!=="svelte-1dyd6n0"&&(R.textContent=ut),ks=l(n),q=p(n,"P",{"data-svelte-h":!0}),c(q)!=="svelte-rxql3q"&&(q.innerHTML=rt),ds=l(n),N=p(n,"PRE",{class:!0});var _e=u(N);hs=k(_e,!1),_e.forEach(s),ms=l(n),B=p(n,"P",{"data-svelte-h":!0}),c(B)!=="svelte-nn3tkl"&&(B.textContent=kt),fs=l(n),G=p(n,"PRE",{class:!0});var ye=u(G);ws=k(ye,!1),ye.forEach(s),gs=l(n),D=p(n,"P",{"data-svelte-h":!0}),c(D)!=="svelte-zfz7b3"&&(D.textContent=dt),vs=l(n),U=p(n,"P",{"data-svelte-h":!0}),c(U)!=="svelte-1st5ry0"&&(U.textContent=ht),_s=l(n),f=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-kpk6g9"&&(f.innerHTML=mt),ys=l(n),O=p(n,"P",{"data-svelte-h":!0}),c(O)!=="svelte-918hai"&&(O.textContent=ft),bs=l(n),F=p(n,"OL",{"data-svelte-h":!0}),c(F)!=="svelte-17e8kpf"&&(F.innerHTML=wt),xs=l(n),W=p(n,"P",{"data-svelte-h":!0}),c(W)!=="svelte-4ig2zh"&&(W.textContent=gt),Cs=l(n),Q=p(n,"PRE",{class:!0});var be=u(Q);Ps=k(be,!1),be.forEach(s),Ts=l(n),Z=p(n,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-nl65ci"&&(Z.textContent=vt),Hs=l(n),V=p(n,"P",{"data-svelte-h":!0}),c(V)!=="svelte-typ6o3"&&(V.textContent=_t),Ms=l(n),Y=p(n,"PRE",{class:!0});var xe=u(Y);Ls=k(xe,!1),xe.forEach(s),Es=l(n),$=p(n,"P",{"data-svelte-h":!0}),c($)!=="svelte-nl65ci"&&($.textContent=yt),Is=l(n),J=p(n,"P",{"data-svelte-h":!0}),c(J)!=="svelte-514d6u"&&(J.innerHTML=bt),As=l(n),K=p(n,"P",{"data-svelte-h":!0}),c(K)!=="svelte-6xod9u"&&(K.textContent=xt),js=l(n),X=p(n,"P",{"data-svelte-h":!0}),c(X)!=="svelte-11yp2yy"&&(X.innerHTML=Ct),zs=l(n),w=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-upt3kx"&&(w.innerHTML=Pt),Ss=l(n),nn=p(n,"P",{"data-svelte-h":!0}),c(nn)!=="svelte-1rr6qh9"&&(nn.innerHTML=Tt),Rs=l(n),sn=p(n,"PRE",{class:!0});var Ce=u(sn);qs=k(Ce,!1),Ce.forEach(s),Ns=l(n),an=p(n,"P",{"data-svelte-h":!0}),c(an)!=="svelte-hvuw42"&&(an.textContent=Ht),Bs=l(n),tn=p(n,"P",{"data-svelte-h":!0}),c(tn)!=="svelte-1iix49g"&&(tn.innerHTML=Mt),Gs=l(n),en=p(n,"P",{"data-svelte-h":!0}),c(en)!=="svelte-1c0iil6"&&(en.innerHTML=Lt),Ds=l(n),pn=p(n,"PRE",{class:!0});var Pe=u(pn);Us=k(Pe,!1),Pe.forEach(s),Os=l(n),on=p(n,"P",{"data-svelte-h":!0}),c(on)!=="svelte-hk7t2s"&&(on.textContent=Et),Fs=l(n),g=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-10ag97v"&&(g.innerHTML=It),Ws=l(n),ln=p(n,"P",{"data-svelte-h":!0}),c(ln)!=="svelte-b6b0py"&&(ln.innerHTML=At),Qs=l(n),cn=p(n,"P",{"data-svelte-h":!0}),c(cn)!=="svelte-1cdwgg5"&&(cn.innerHTML=jt),Zs=l(n),un=p(n,"PRE",{class:!0});var Te=u(un);Vs=k(Te,!1),Te.forEach(s),Ys=l(n),rn=p(n,"P",{"data-svelte-h":!0}),c(rn)!=="svelte-hk7t2s"&&(rn.textContent=zt),$s=l(n),kn=p(n,"PRE",{class:!0});var He=u(kn);Js=k(He,!1),He.forEach(s),Ks=l(n),dn=p(n,"PRE",{class:!0});var Me=u(dn);Xs=k(Me,!1),Me.forEach(s),na=l(n),hn=p(n,"P",{"data-svelte-h":!0}),c(hn)!=="svelte-nl65ci"&&(hn.textContent=St),sa=l(n),mn=p(n,"P",{"data-svelte-h":!0}),c(mn)!=="svelte-1rndn2l"&&(mn.innerHTML=Rt),aa=l(n),fn=p(n,"P",{"data-svelte-h":!0}),c(fn)!=="svelte-1efso5l"&&(fn.textContent=qt),ta=l(n),v=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-12s81lq"&&(v.innerHTML=Nt),ea=l(n),wn=p(n,"P",{"data-svelte-h":!0}),c(wn)!=="svelte-1hshcit"&&(wn.innerHTML=Bt),pa=l(n),gn=p(n,"PRE",{class:!0});var Le=u(gn);oa=k(Le,!1),Le.forEach(s),la=l(n),vn=p(n,"P",{"data-svelte-h":!0}),c(vn)!=="svelte-nl65ci"&&(vn.textContent=Gt),ca=l(n),_n=p(n,"P",{"data-svelte-h":!0}),c(_n)!=="svelte-1yuy6th"&&(_n.innerHTML=Dt),ia=l(n),_=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-1u9i4x9"&&(_.innerHTML=Ut),ua=l(n),yn=p(n,"PRE",{class:!0});var Ee=u(yn);ra=k(Ee,!1),Ee.forEach(s),ka=l(n),bn=p(n,"P",{"data-svelte-h":!0}),c(bn)!=="svelte-w73020"&&(bn.textContent=Ot),da=l(n),xn=p(n,"P",{"data-svelte-h":!0}),c(xn)!=="svelte-1x5otyo"&&(xn.innerHTML=Ft),ha=l(n),Cn=p(n,"P",{"data-svelte-h":!0}),c(Cn)!=="svelte-1lmvzzg"&&(Cn.innerHTML=Wt),ma=l(n),y=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-nuy2pt"&&(y.innerHTML=Qt),fa=l(n),Pn=p(n,"PRE",{class:!0});var Ie=u(Pn);wa=k(Ie,!1),Ie.forEach(s),ga=l(n),Tn=p(n,"P",{"data-svelte-h":!0}),c(Tn)!=="svelte-1ni5j2"&&(Tn.textContent=Zt),va=l(n),Hn=p(n,"P",{"data-svelte-h":!0}),c(Hn)!=="svelte-110h99s"&&(Hn.innerHTML=Vt),_a=l(n),b=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(b)!=="svelte-1v15u8q"&&(b.innerHTML=Yt),ya=l(n),Mn=p(n,"P",{"data-svelte-h":!0}),c(Mn)!=="svelte-1ydbl0f"&&(Mn.textContent=$t),ba=l(n),Ln=p(n,"PRE",{class:!0});var Ae=u(Ln);xa=k(Ae,!1),Ae.forEach(s),Ca=l(n),En=p(n,"P",{"data-svelte-h":!0}),c(En)!=="svelte-yxqjg8"&&(En.textContent=Jt),Pa=l(n),In=p(n,"P",{"data-svelte-h":!0}),c(In)!=="svelte-1tlef4e"&&(In.textContent=Kt),Ta=l(n),x=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-1au4gf0"&&(x.innerHTML=Xt),Ha=l(n),C=p(n,"VIDEO",{src:!0}),u(C).forEach(s),Ma=l(n),An=p(n,"P",{"data-svelte-h":!0}),c(An)!=="svelte-19xgyrf"&&(An.textContent=se),La=l(n),jn=p(n,"P",{"data-svelte-h":!0}),c(jn)!=="svelte-d6c6ny"&&(jn.textContent=ae),Ea=l(n),zn=p(n,"P",{"data-svelte-h":!0}),c(zn)!=="svelte-1ncgcyx"&&(zn.textContent=te),Ia=l(n),Sn=p(n,"P",{"data-svelte-h":!0}),c(Sn)!=="svelte-9a643e"&&(Sn.textContent=ee),Aa=l(n),Rn=p(n,"PRE",{class:!0});var je=u(Rn);ja=k(je,!1),je.forEach(s),za=l(n),qn=p(n,"P",{"data-svelte-h":!0}),c(qn)!=="svelte-a8yljb"&&(qn.textContent=pe),Sa=l(n),Nn=p(n,"P",{"data-svelte-h":!0}),c(Nn)!=="svelte-buquq3"&&(Nn.textContent=oe),Ra=l(n),Bn=p(n,"P",{"data-svelte-h":!0}),c(Bn)!=="svelte-fcgxcr"&&(Bn.innerHTML=le),qa=l(n),Gn=p(n,"P",{"data-svelte-h":!0}),c(Gn)!=="svelte-gdr8n4"&&(Gn.textContent=ce),Na=l(n),Dn=p(n,"P",{"data-svelte-h":!0}),c(Dn)!=="svelte-30y9sn"&&(Dn.textContent=ie),Ba=l(n),Un=p(n,"P",{"data-svelte-h":!0}),c(Un)!=="svelte-j6iwjj"&&(Un.textContent=ue),Ga=l(n),On=p(n,"P",{"data-svelte-h":!0}),c(On)!=="svelte-ob2wy1"&&(On.textContent=re),Da=l(n),Fn=p(n,"PRE",{class:!0});var ze=u(Fn);Ua=k(ze,!1),ze.forEach(s),Oa=l(n),Wn=p(n,"P",{"data-svelte-h":!0}),c(Wn)!=="svelte-1s6zc1j"&&(Wn.textContent=ke),Fa=l(n),Qn=p(n,"P",{"data-svelte-h":!0}),c(Qn)!=="svelte-xfcwhw"&&(Qn.textContent=de),Wa=l(n),P=p(n,"VIDEO",{src:!0}),u(P).forEach(s),Qa=l(n),Za=p(n,"BR",{}),Va=l(n),Zn=p(n,"P",{"data-svelte-h":!0}),c(Zn)!=="svelte-ds2t1k"&&(Zn.textContent=me),Ya=l(n),Vn=p(n,"P",{"data-svelte-h":!0}),c(Vn)!=="svelte-1uokpwe"&&(Vn.textContent=fe),$a=l(n),Yn=p(n,"P",{"data-svelte-h":!0}),c(Yn)!=="svelte-10q9fv"&&(Yn.textContent=we),Ja=l(n),$n=p(n,"P",{"data-svelte-h":!0}),c($n)!=="svelte-yowaef"&&($n.textContent=ge),this.h()},h(){i(d,"id","contents"),i(h,"id","introduction"),i(m,"id","modifying-the-birds"),cs.a=null,i(z,"class","language-gdscript"),us.a=null,i(S,"class","language-gdscript"),hs.a=null,i(N,"class","language-gdscript"),ws.a=null,i(G,"class","language-gdscript"),i(f,"id","generating-the-population"),Ps.a=null,i(Q,"class","language-gdscript"),Ls.a=null,i(Y,"class","language-gdscript"),i(w,"id","testing-the-population"),qs.a=null,i(sn,"class","language-gdscript"),Us.a=null,i(pn,"class","language-gdscript"),i(g,"id","gathering-the-results"),Vs.a=null,i(un,"class","language-gdscript"),Js.a=null,i(kn,"class","language-gdscript"),Xs.a=null,i(dn,"class","language-gdscript"),i(v,"id","the-genetic-algorithm"),oa.a=null,i(gn,"class","language-gdscript"),i(_,"id","selection"),ra.a=null,i(yn,"class","language-gdscript"),i(y,"id","crossover"),wa.a=null,i(Pn,"class","language-gdscript"),i(b,"id","mutation"),xa.a=null,i(Ln,"class","language-gdscript"),i(x,"id","the-end-result"),Se(C.src,ne="/blogs/flappy-birds-godot/Gameplay 1.mp4")||i(C,"src",ne),C.controls=!0,ja.a=null,i(Rn,"class","language-gdscript"),Ua.a=null,i(Fn,"class","language-gdscript"),Se(P.src,he="/blogs/flappy-birds-godot/Gameplay 2.mp4")||i(P,"src",he),P.controls=!0},m(n,a){t(n,d,a),t(n,Jn,a),t(n,T,a),t(n,Kn,a),t(n,h,a),t(n,Xn,a),t(n,H,a),t(n,ns,a),t(n,M,a),t(n,ss,a),t(n,L,a),t(n,as,a),t(n,E,a),t(n,ts,a),t(n,I,a),t(n,es,a),t(n,A,a),t(n,ps,a),t(n,m,a),t(n,os,a),t(n,j,a),t(n,ls,a),t(n,z,a),cs.m(qe,z),t(n,is,a),t(n,S,a),us.m(Ne,S),t(n,rs,a),t(n,R,a),t(n,ks,a),t(n,q,a),t(n,ds,a),t(n,N,a),hs.m(Be,N),t(n,ms,a),t(n,B,a),t(n,fs,a),t(n,G,a),ws.m(Ge,G),t(n,gs,a),t(n,D,a),t(n,vs,a),t(n,U,a),t(n,_s,a),t(n,f,a),t(n,ys,a),t(n,O,a),t(n,bs,a),t(n,F,a),t(n,xs,a),t(n,W,a),t(n,Cs,a),t(n,Q,a),Ps.m(De,Q),t(n,Ts,a),t(n,Z,a),t(n,Hs,a),t(n,V,a),t(n,Ms,a),t(n,Y,a),Ls.m(Ue,Y),t(n,Es,a),t(n,$,a),t(n,Is,a),t(n,J,a),t(n,As,a),t(n,K,a),t(n,js,a),t(n,X,a),t(n,zs,a),t(n,w,a),t(n,Ss,a),t(n,nn,a),t(n,Rs,a),t(n,sn,a),qs.m(Oe,sn),t(n,Ns,a),t(n,an,a),t(n,Bs,a),t(n,tn,a),t(n,Gs,a),t(n,en,a),t(n,Ds,a),t(n,pn,a),Us.m(Fe,pn),t(n,Os,a),t(n,on,a),t(n,Fs,a),t(n,g,a),t(n,Ws,a),t(n,ln,a),t(n,Qs,a),t(n,cn,a),t(n,Zs,a),t(n,un,a),Vs.m(We,un),t(n,Ys,a),t(n,rn,a),t(n,$s,a),t(n,kn,a),Js.m(Qe,kn),t(n,Ks,a),t(n,dn,a),Xs.m(Ze,dn),t(n,na,a),t(n,hn,a),t(n,sa,a),t(n,mn,a),t(n,aa,a),t(n,fn,a),t(n,ta,a),t(n,v,a),t(n,ea,a),t(n,wn,a),t(n,pa,a),t(n,gn,a),oa.m(Ve,gn),t(n,la,a),t(n,vn,a),t(n,ca,a),t(n,_n,a),t(n,ia,a),t(n,_,a),t(n,ua,a),t(n,yn,a),ra.m(Ye,yn),t(n,ka,a),t(n,bn,a),t(n,da,a),t(n,xn,a),t(n,ha,a),t(n,Cn,a),t(n,ma,a),t(n,y,a),t(n,fa,a),t(n,Pn,a),wa.m($e,Pn),t(n,ga,a),t(n,Tn,a),t(n,va,a),t(n,Hn,a),t(n,_a,a),t(n,b,a),t(n,ya,a),t(n,Mn,a),t(n,ba,a),t(n,Ln,a),xa.m(Je,Ln),t(n,Ca,a),t(n,En,a),t(n,Pa,a),t(n,In,a),t(n,Ta,a),t(n,x,a),t(n,Ha,a),t(n,C,a),t(n,Ma,a),t(n,An,a),t(n,La,a),t(n,jn,a),t(n,Ea,a),t(n,zn,a),t(n,Ia,a),t(n,Sn,a),t(n,Aa,a),t(n,Rn,a),ja.m(Ke,Rn),t(n,za,a),t(n,qn,a),t(n,Sa,a),t(n,Nn,a),t(n,Ra,a),t(n,Bn,a),t(n,qa,a),t(n,Gn,a),t(n,Na,a),t(n,Dn,a),t(n,Ba,a),t(n,Un,a),t(n,Ga,a),t(n,On,a),t(n,Da,a),t(n,Fn,a),Ua.m(Xe,Fn),t(n,Oa,a),t(n,Wn,a),t(n,Fa,a),t(n,Qn,a),t(n,Wa,a),t(n,P,a),t(n,Qa,a),t(n,Za,a),t(n,Va,a),t(n,Zn,a),t(n,Ya,a),t(n,Vn,a),t(n,$a,a),t(n,Yn,a),t(n,Ja,a),t(n,$n,a)},p:Ka,i:Ka,o:Ka,d(n){n&&(s(d),s(Jn),s(T),s(Kn),s(h),s(Xn),s(H),s(ns),s(M),s(ss),s(L),s(as),s(E),s(ts),s(I),s(es),s(A),s(ps),s(m),s(os),s(j),s(ls),s(z),s(is),s(S),s(rs),s(R),s(ks),s(q),s(ds),s(N),s(ms),s(B),s(fs),s(G),s(gs),s(D),s(vs),s(U),s(_s),s(f),s(ys),s(O),s(bs),s(F),s(xs),s(W),s(Cs),s(Q),s(Ts),s(Z),s(Hs),s(V),s(Ms),s(Y),s(Es),s($),s(Is),s(J),s(As),s(K),s(js),s(X),s(zs),s(w),s(Ss),s(nn),s(Rs),s(sn),s(Ns),s(an),s(Bs),s(tn),s(Gs),s(en),s(Ds),s(pn),s(Os),s(on),s(Fs),s(g),s(Ws),s(ln),s(Qs),s(cn),s(Zs),s(un),s(Ys),s(rn),s($s),s(kn),s(Ks),s(dn),s(na),s(hn),s(sa),s(mn),s(aa),s(fn),s(ta),s(v),s(ea),s(wn),s(pa),s(gn),s(la),s(vn),s(ca),s(_n),s(ia),s(_),s(ua),s(yn),s(ka),s(bn),s(da),s(xn),s(ha),s(Cn),s(ma),s(y),s(fa),s(Pn),s(ga),s(Tn),s(va),s(Hn),s(_a),s(b),s(ya),s(Mn),s(ba),s(Ln),s(Ca),s(En),s(Pa),s(In),s(Ta),s(x),s(Ha),s(C),s(Ma),s(An),s(La),s(jn),s(Ea),s(zn),s(Ia),s(Sn),s(Aa),s(Rn),s(za),s(qn),s(Sa),s(Nn),s(Ra),s(Bn),s(qa),s(Gn),s(Na),s(Dn),s(Ba),s(Un),s(Ga),s(On),s(Da),s(Fn),s(Oa),s(Wn),s(Fa),s(Qn),s(Wa),s(P),s(Qa),s(Za),s(Va),s(Zn),s(Ya),s(Vn),s($a),s(Yn),s(Ja),s($n))}}}const op={title:"Genetic Algorithm on Flappy Birds",publishedDate:"4 March 2024",lastUpdate:"9 August 2024",published:!0,description:"Implementing genetic algorithm to a Flappy Birds game made in Godot.",projectLinks:[{name:"Github",url:"https://github.com/hans-e-yang/Flappy-Bird-with-Genetic-Algorithm"},{tag:'<iframe frameborder="0" src="https://itch.io/embed/2556808?linkback=true" width="208" height="167"><a href="https://hanseyang.itch.io/ml-flappy-birds">ML Flappy Birds by Hanseyang</a></iframe>'}]};class lp extends sp{constructor(d){super(),ap(this,d,null,tp,np,{})}}export{lp as default,op as metadata};
